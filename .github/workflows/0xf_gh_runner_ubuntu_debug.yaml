name: 0xf âž¼ Debug (gh-runner) Ubuntu-22.04
#Image: https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2204-Readme.md
on:
  workflow_dispatch:
env:
  #Authenticate with [ Pre-Approved: Yes(No, if you intend to expose key publicly) | Ephemeral:Yes | ReUsable: Yes] Key: https://login.tailscale.com/admin/settings/keys
  #DO NOT PUT A PRE_APPROVED HIGH PRIVILEGED KEY
  # Use a secret [ ${{ secrets.TSKEY }} ] instead: https://github.com/Azathothas/Runners/settings/secrets/actions >> New Repository Secret >> Name = TSKEY
  #If it's least privileged, NOT Pre-Approved and you don't care bots sshing into your machines, uncomment and replace with yours.
  #TSKEY: "tskey-auth-k99X9C6CNTRL-9vLLaJWxZBShRvNFSifuBSwvm3fijbBAE"
  #This is the machine name
  THOST: "gh-runner-ubuntu"
  #The Username for Runners
  TUSER: "runner"
  
jobs:
  connect:
    runs-on: ubuntu-latest
    #Default Timeout= 6 Hr (360 Mins) : https://nesin.io/blog/github-action-timeout
    #Docs: https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration
    #It's best to cause this timeout from your own side (Low to No chance of GH Disabling your repo) rather than gh (High Chance of them disabling your repo)
    timeout-minutes: 350 
    permissions:
      contents: write
      
    steps:
      # Static Binaries are used instead of pkg manager to save Time & Space     
      - name: Setup Tailscale
        run: |
          # Presets
          set +x ; set +e
          #--------------#
          ##Enable a proper sshd (Must be executed before tailscale can setup, else won't work) [Apply only when needed]
          #curl -qfsSL "https://raw.githubusercontent.com/Azathothas/Arsenal/main/misc/Linux/Debian/setup_ssh_x86_64.sh" | sudo bash -s -- -f
          #Download & Chmod
          sudo curl -qfSL "https://raw.githubusercontent.com/Azathothas/Static-Binaries/main/tailscale/tailscale_amd_x86_64_Linux" -o "/usr/local/bin/tailscale"
          sudo curl -qfSL "https://raw.githubusercontent.com/Azathothas/Static-Binaries/main/tailscale/tailscaled_amd_x86_64_Linux" -o "/usr/local/bin/tailscaled"
          sudo chmod +xwr /usr/local/bin/tailscale*
          #Enable Userspace Networking
          sudo tailscaled --tun=userspace-networking --socks5-server=localhost:9025 --outbound-http-proxy-listen=localhost:9025 >/dev/null 2>&1 &
          #Authenticate with Ephemeral Key: https://login.tailscale.com/admin/settings/keys
          sudo tailscale up --ssh --hostname="${{ env.THOST }}" --authkey="${{ secrets.TSKEY }}" 
          #Check Status
          sudo tailscale status --peers=false
          #Get SSH String
          SSH_IP="$(sudo tailscale ip -4 | tr -d '\n')" && export SSH_IP="$SSH_IP"
          TS_DNS="$(sudo tailscale status --json | jq -r '.Self.DNSName')" && export TS_DNS="$TS_DNS"
          #PRINT Details
          export GREEN='\033[32m' ; export BLUE='\033[34m' ; export YELLOW='\033[33m' ; export PURPLE='\033[35m' ; export VIOLET='\033[0;35m' ; export NC='\033[0m'
          echo -e "${GREEN}SSH: ${YELLOW}ssh "$USER@$SSH_IP" -o "StrictHostKeyChecking=no${NC}"\n     ${YELLOW}ssh "$USER@$TS_DNS" -o "StrictHostKeyChecking=no${NC}""
          #In case of debug
          #sleep 60s
          #Also shows up on: https://login.tailscale.com/admin/machines
          
      #Removes certain pre-installed libs & bins : https://github.com/Azathothas/Arsenal/blob/main/misc/Github/Runners/Ubuntu/debloat.sh   
      - name: Debloat
        run: |
          # Presets
          set -x ; set +e
          #--------------#
          #oneliner
          #bash <(curl -qfsSL "https://raw.githubusercontent.com/Azathothas/Arsenal/main/misc/Github/Runners/Ubuntu/debloat.sh")
          #Manually
          #12.0 GB
          sudo rm /usr/local/lib/android -rf 2>/dev/null
          #8.2 GB
          sudo rm /opt/hostedtoolcache/CodeQL -rf 2>/dev/null
          #5.0 GB
          sudo rm /usr/local/.ghcup -rf 2>/dev/null
          #2.0 GB
          sudo rm /usr/share/dotnet -rf 2>/dev/null
          #1.7 GB
          sudo rm /usr/share/swift -rf 2>/dev/null
          #1.1 GB
          #sudo rm /usr/local/lib/node_modules -rf 2>/dev/null
          #1.0 GB
          sudo rm /usr/local/share/powershell -rf 2>/dev/null
          #500 MB
          sudo rm /usr/local/lib/heroku -rf 2>/dev/null
        continue-on-error: true
        
      - name: Install CoreUtils
        run: |
           # Presets
           set -x ; set +e
           #--------------#
           sudo apt-get update -y
           sudo apt-get --fix-missing
           sudo apt-get install -y --no-install-recommends autoconf automake autopoint binutils bison build-essential ca-certificates flex file jq patch patchelf pkg-config python3-pip qemu-user-static wget 
           sudo apt-get install -y bison build-essential ca-certificates ccache flex '*glibc*' jq 'libssl*' lzip musl musl-dev musl-tools 'openssl*' p7zip-full pkg-config qemu-user-static wget
           sudo apt-get install coreutils moreutils -y
           pip install ansi2txt
           # Do again, sometimes fails
           sudo apt install coreutils curl dos2unix jq moreutils wget -y
           pip install ansi2txt
           # For TG BOT Notifs
           pip install apprise 
           pip install apprise 2>/dev/null
           # For neofetch
           pip install archey4
           pip install archey4 2>/dev/null
        continue-on-error: true

     #Comment, if you do not want a build/compile ready environment for python
      - name: Install StaticX
        run: |
          # Presets
          set -x ; set +e
          #--------------#
          pip3 install scons
          pip3 install staticx
          pip3 install pyinstaller
          pip3 install py2static
          pip3 install typer
        continue-on-error: true
        
     #Comment, if you do not want a build/compile ready environment for rust      
      - name: Install Rust ToolChains
        run: |
           # Presets
           set -x ; set +e
           #--------------#
           # for rust & cargo
           cargo install -f cross
        continue-on-error: true
        
     #Comment, if you do not want to pre-install anything
     #Tools Installed: https://github.com/Azathothas/Toolpacks/tree/main/x86_64
     #Note: It takes 1-2 Mins, and CPU/RAM usage of GH until this time will be high
      - name: Install Addons & ToolPacks
        run: |
           # Presets
           set -x ; set +e
           #--------------#
           # for binaries
           # eget for bins
           sudo wget "https://raw.githubusercontent.com/Azathothas/Toolpacks/main/x86_64/eget" -O "/usr/local/bin/eget"
           sudo chmod +xwr "/usr/local/bin/eget"
           # 7zip
           sudo eget "https://raw.githubusercontent.com/Azathothas/Toolpacks/main/x86_64/7z" --to "/usr/local/bin/7z"
           # ppath for paths
           sudo eget "https://raw.githubusercontent.com/Azathothas/Toolpacks/main/x86_64/ppath" --to "/usr/local/bin/ppath"
           # All Bins
           #sudo eget "Azathothas/Toolpacks" --asset "toolpack_x86_64.tar.bz2" --all --to "/usr/local/bin" && sudo chmod +xwr /usr/local/bin/*
           wget "$(curl -qfsSL "https://api.github.com/repos/Azathothas/Toolpacks/releases" | jq -r '.[] | select(.assets[].name | contains("x86_64")) | .assets[].browser_download_url' | grep -i '.7z$' | sort -u | tail -n 1)" -O "./toolpack_x86_64.7z"
           # "$HOME/bin"
           mkdir -p "$HOME/bin" ; 7z e "./toolpack_x86_64.7z" -o"$HOME/bin" -y && rm -rf "$HOME/bin/toolpack_x86_64" 2>/dev/null && rm -rf "./toolpack_x86_64.7z" ; chmod +xwr $HOME/bin/* 2>/dev/null
           # "/usr/local/bin"
           #sudo 7z e "./toolpack_x86_64.7z" -o"/usr/local/bin" -y 2>/dev/null && sudo rm -rf "/usr/local/bin/toolpack_x86_64" 2>/dev/null && sudo rm -rf "./toolpack_x86_64.7z" 2>/dev/null ; sudo chmod +xwr /usr/local/bin/* 2>/dev/null
        continue-on-error: true

      - name: Install Alsa-Libs (libasound)
        run: |
          # Presets
          set -x ; set +e
          #--------------#
          sudo apt-get install alsa-base alsa-utils linux-sound-base libasound2-dev libfl-dev libjack-dev librust-cpal-dev libxi-dev libxtst-dev -y
          pushd "$(mktemp -d)" && git clone --filter "blob:none" "https://github.com/alsa-project/alsa-lib" && cd "alsa-lib"
          bash "./gitcompile" ; "./configure" --enable-shared=no --enable-static=yes
          sudo make install ; popd
        continue-on-error: true

      - name: Install Meson & Ninja
        run: |
          #Presets
          set -x ; set +e
          #Install
          sudo rm "/usr/bin/meson" "/usr/bin/ninja" 2>/dev/null
          pip install meson ninja --upgrade
          #python3 -m pip install meson ninja --upgrade
          sudo ln -s "$HOME/.local/bin/meson" "/usr/bin/meson" 2>/dev/null
          sudo ln -s "$HOME/.local/bin/ninja" "/usr/bin/ninja" 2>/dev/null
          sudo chmod +xwr "/usr/bin/meson" "/usr/bin/ninja"
          #version
          meson --version ; ninja --version
        continue-on-error: true

      # - name: Build mold
      #   run: |
      #     # Presets
      #     set -x ; set +e
      #     #--------------#
      #     #Get Source & Create Build Dirs
      #     pushd "$(mktemp -d)" && git clone --filter="blob:none" "https://github.com/rui314/mold.git" && mkdir -p "./mold/build"
      #     #Checkout latest version
      #     git checkout "$(git tag --sort=-creatordate | head -n 1)"
      #     #Install Build Deps
      #     cd "./mold/build" && sudo bash "../install-build-deps.sh"
      #     #Build & Compile
      #     cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=c++ ..
      #     cmake --build . -j"$(($(nproc)+1))"
      #     #Install
      #     sudo cmake --build . --target install ; popd
      #     # -- Install configuration: "Release"
      #     # -- Installing: /usr/local/lib/mold/mold-wrapper.so
      #     # -- Installing: /usr/local/bin/mold
      #     # -- Installing: /usr/local/share/man/man1/mold.1
      #     # -- Installing: /usr/local/share/doc/mold/LICENSE
      #     # -- Installing: /usr/local/share/doc/mold/LICENSE.third-party
      #     # -- Installing symlink: /usr/local/libexec/mold/ld -> ../../bin/mold
      #     # -- Installing symlink: /usr/local/bin/ld.mold -> mold
      #     # -- Installing symlink: /usr/local/share/man/man1/ld.mold.1 -> mold.1
      #     #Test
      #     mold --version
      #   continue-on-error: true

      - name: Install Mold
        run: |
          # Presets
          set -x ; set +e
          #--------------#
          #Download latest release
          pushd "$(mktemp -d)" && eget "rui314/mold" --asset "x86_64-linux.tar.gz" --download-only --to "./mold.tar.gz"
          #Extract Archive
          find . -type f -name "*.tar.gz*" -exec tar -xvf {} --strip-components=1 \;
          #Main Binary
          sudo cp "./bin/mold" "/usr/local/bin/mold" ; sudo chmod +xwr "/usr/local/bin/mold"
          #symlinks 
          # /usr/local/bin/ld.mold -> mold
          sudo ln -s "/usr/local/bin/mold" "/usr/local/bin/ld.mold"
          # /usr/local/libexec/mold/ld --> /usr/local/bin/mold
          sudo mkdir -p "/usr/local/libexec/mold" && sudo ln -s "/usr/local/bin/mold" "/usr/local/libexec/mold/ld" ; sudo chmod +xwr "/usr/local/libexec/mold"/*
          #lib : /usr/local/lib/mold/mold-wrapper.so
          sudo cp -r "./lib/." "/usr/local/lib/" ; sudo chmod +xwr "/usr/local/lib/mold"/* ; popd
          #Test
          mold --version
        continue-on-error: true

     #Comment, if you do not want a build/compile ready environment for zig
     #REQUIRED for ncurses
      - name: Install Zig
        run: |
         pushd "$(mktemp -d)" && curl -qfSLJO $(curl -qfsSL "https://ziglang.org/download/index.json" | jq -r '.master | ."x86_64-linux".tarball')
         find . -type f -name '*.tar*' -exec tar -xvf {} \;
         sudo mkdir -p "/usr/local/zig" && sudo mv "$(find . -maxdepth 1 -type d | grep -v '^.$')"/* "/usr/local/zig"
         export PATH="/usr/local/zig:/usr/local/zig/lib:/usr/local/zig/lib/include:$PATH"
         zig version ; popd
        continue-on-error: true
        
     #ncurses
      - name: Build & Install ncurses (x86_64)
        run: |
         #Download
          set -x ; set +e
         #-------------------------#
          #changelogs: https://invisible-island.net/ncurses/NEWS.html
          #Create tmp dir & get latest stable sources
          pushd "$(mktemp -d)" && wget --quiet "https://invisible-island.net/datafiles/release/ncurses.tar.gz"
          find . -type f -name "*.tar.gz*" -exec tar -xvf {} \; 2>/dev/null
          cd "$(find . -maxdepth 1 -type d -name "*ncurses*" | grep -v "^.$")"
          #https://invisible-island.net/ncurses/INSTALL.html
          sudo apt-get install libtool-bin -y
          make dist clean 2>/dev/null ; make clean 2>/dev/null 
          #export FLAGS
          export PATH="/usr/local/zig:/usr/local/zig/lib:/usr/local/zig/lib/include:$PATH"
          zig version
          export CC="zig cc -target x86_64-linux-musl"
          export CXX="zig c++ -target x86_64-linux-musl"
          export HOST_CC="zig cc -target x86_64-linux-musl"
          export HOST_CXX="zig c++ -target x86_64-linux-musl"
          #Configure with zig cc & sane opts
          "./configure" --with-build-cc="zig cc -target x86_64-linux-musl" --with-build-cpp="zig c++ -target x86_64-linux-musl" --with-libtool --with-libtool-opts="-static" --enable-bsdpad --enable-getcap --enable-static --with-normal --without-debug
          #Build
          make CC="$CC" CXX="$CXX" HOST_CC="$HOST_CC" HOST_CXX="$HOST_CXX" TARGET_STRIP="strip" --jobs="$(($(nproc)+1))" --keep-going 
          #Test
          find "./progs" -type f -exec strip {} 2>/dev/null \; 2>/dev/null
          file "./progs/"* 2>/dev/null && ldd "./progs/"* 2>/dev/null
          ls -sh "./progs/"* ; chmdo +xwr "./progs/"* ; "./progs/tput" -V
          #Install
          sudo make install ; tput -V ; popd
        continue-on-error: true
           
     #Exports all PATHs to ~/.bash_profile            
      - name: Export PATH
        run: |
           # Source PATH
           # "$HOME/.bash_profile"
           echo '{ [ -d "$HOME/bin" ] || mkdir -p "$HOME/bin"; } && { [ -d "$HOME/.local/bin" ] || mkdir -p "$HOME/.local/bin"; } && export PATH=$(echo "$PATH:$HOME/bin:$HOME/.local/bin:/usr/local/zig:/usr/local/zig/lib:/usr/local/zig/lib/include" | awk '\''BEGIN{RS=":";ORS=":"}{gsub(/\n/,"");if(!a[$0]++)print}'\'' | sed '\''s/:*$//'\'')' | tee -a "$HOME/.bash_profile"
           # "$HOME/.bashrc"
           echo '{ [ -d "$HOME/bin" ] || mkdir -p "$HOME/bin"; } && { [ -d "$HOME/.local/bin" ] || mkdir -p "$HOME/.local/bin"; } && export PATH=$(echo "$PATH:$HOME/bin:$HOME/.local/bin:/usr/local/zig:/usr/local/zig/lib:/usr/local/zig/lib/include" | awk '\''BEGIN{RS=":";ORS=":"}{gsub(/\n/,"");if(!a[$0]++)print}'\'' | sed '\''s/:*$//'\'')' | tee -a "$HOME/.bashrc"
           # "$HOME/.zshrc"
           #echo '{ [ -d "$HOME/bin" ] || mkdir -p "$HOME/bin"; } && { [ -d "$HOME/.local/bin" ] || mkdir -p "$HOME/.local/bin"; } && export PATH=$(echo "$PATH:$HOME/bin:$HOME/.local/bin:/usr/local/zig:/usr/local/zig/lib:/usr/local/zig/lib/include" | awk '\''BEGIN{RS=":";ORS=":"}{gsub(/\n/,"");if(!a[$0]++)print}'\'' | sed '\''s/:*$//'\'')' | tee -a "$HOME/.zshrc"
           #echo path
           source "$HOME/.bash_profile"
           source "$HOME/.bashrc"
           ppath -all
        continue-on-error: true
        
     #Replace with any extra things you want to do             
      - name: Run Custom Cmd
        run: |
           echo "Hellow"
        continue-on-error: true

     #This keeps GH Actions hypnotized until timeout                
      - name: Breakpoint || Sleep âˆž
        run: |        
          while :; do sleep 1; done
